# Pivotal OSS Build Schema for Apache HTTP Server
#
# Copyright (C) 2017-Present Pivotal Software, Inc. All rights reserved.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Makefile.build : Build all components described by the manifest in the
#                  source tree.
#
# BLD defines the build type: release - candidate - snapshot - bleed
# TAG defines the target directory and package name suffixes
#
# This makefile is run after Makefile.gather and Makefile.preconfig
#
# This makefile must be run from the build (not source) subdirectory,
# the build tree uses the same component directory names as the source tree
# The components are initially installed into the DESTDIR which is the
# ../dst/httpd component directory name with the TAG variable suffixed.

BLD=release
TAG=
SRCDIR=..\src

!INCLUDE $(SRCDIR)\$(BLD)-manifest-vars

!IF [FOR /F "usebackq" %d in (`cmd.exe /c "cd $(SRCDIR)\.. & cd"`) DO ECHO ROOTDIR=%d > rootdir.include] == 0
!INCLUDE rootdir.include
!IF [del rootdir.include] == 0
!ENDIF
!ENDIF

SRCDIR=$(ROOTDIR)\src
DESTDIR=$(ROOTDIR)\dst\$(httpd_srcdir)$(TAG)
TARGET=C:\pivotal\webserver\$(httpd_srcdir)$(TAG)

CMAKE_DEFAULTS=-G "NMake Makefiles" -D CMAKE_BUILD_TYPE=RelWithDebInfo -D CMAKE_COLOR_MAKEFILE=OFF 
PREFER_CMAKE=1

all: build-httpd

pre-build:
	-mkdir -p $(DSTDIR) 2>NUL

!IFNDEF expat_srcdir
with_expat=
build-expat:
!ELSE
with_expat=--with-expat=$(DESTDIR)
$(expat_srcdir)/Makefile:  $(SRCDIR)/$(expat_srcdir)/expat/CMakeLists.txt
	-mkdir $(expat_srcdir) 2>NUL
	cd $(expat_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) -D BUILD_tests=OFF -D BUILD_tools=OFF \
		-D BUILD_shared=OFF -D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(expat_srcdir)/expat && \
	cd ..

build-expat: $(expat_srcdir)/Makefile
	cd $(expat_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
!ENDIF


# Or use CPU below?
!IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
OPENSSL_ARCH=VC-WIN64A-masm
!ELSE
OPENSSL_ARCH=VC-WIN32
!ENDIF

##!IF "$(patsubst 1.0.%,,$(openssl_ver))" == ""
##openssl_legacy=1
##!ENDIF

!IFNDEF openssl_srcdir
build-openssl:
!ELSE
# Ancient openssl 1.0.2 did not support vpath builds or concurrent builds
!IFDEF openssl_legacy
$(openssl_srcdir)/Makefile: $(SRCDIR)/$(openssl_srcdir)
#			    $(firstword $(MAKEFILE_LIST))
			    
	-mkdir $(openssl_srcdir) 2>NUL
	xcopy /s/v/e $(SRCDIR)\$(openssl_srcdir)\* $(openssl_srcdir)\ 
	cd $(openssl_srcdir) && \
	  perl ./Configure --prefix=$(DESTDIR) shared \
		   -I$(DESTDIR)/include -L$(DESTDIR)/lib $(OPENSSL_ARCH) && \
	cd ..
!ELSE
$(openssl_srcdir)/Makefile: $(SRCDIR)/$(openssl_srcdir)/Configure
	-mkdir $(openssl_srcdir) 2>NUL
	cd $(openssl_srcdir) && \
	  perl $(SRCDIR)/$(openssl_srcdir)/Configure shared \
		 --libdir=lib --prefix=$(DESTDIR) --openssldir=$(DESTDIR)/ssl $(OPENSSL_ARCH) && \
	cd ..
!ENDIF

build-openssl: $(openssl_srcdir)/Makefile
	cd $(openssl_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	  copy /y $(SRCDIR)\$(openssl_srcdir)\ms\applink.c $(DESTDIR)\include\openssl\ && \
	cd ..
!ENDIF


!IFNDEF openldap_srcdir
with_openldap=--without-ldap --without-lber
enable_ldap=--disable-ldap --disable-authnz-ldap
build-openldap:
!ELSE
# TODO: This is the linux build schema, needs refactoring
with_openldap=--with-ldap-lib=$(DESTDIR)/lib --with-ldap-include=$(DESTDIR)/include --with-ldap=ldap --with-lber=lber
enable_ldap=--enable-ldap --enable-authnz-ldap

$(openldap_srcdir)/Makefile: build-openssl \
			     $(SRCDIR)/$(openldap_srcdir)/configure
	-mkdir $(openldap_srcdir) 2>/dev/null
	cd $(openldap_srcdir) && \
	  CPPFLAGS="-I$(DESTDIR)/include $(CPPFLAGS)" \
	  LDFLAGS="-L$(DESTDIR)/lib $(LDFLAGS)" \
	  $(SRCDIR)/$(openldap_srcdir)/configure \
		 --with-tls=openssl \
		 --without-cyrus-sasl \
		 --disable-ldbm \
		 --disable-sasl \
		 --disable-slapd \
		 --disable-slurpd \
		 --prefix=$(DESTDIR) && \
	cd ..

build-openldap: $(openldap_srcdir)/Makefile
	cd $(openldap_srcdir) && \
	  make $(OPT) && \
	  make $(OPT) install && \
	cd ..
!ENDIF


!IF $(PREFER_CMAKE)
$(apr_srcdir)/Makefile: build-openssl build-expat \
			$(SRCDIR)/$(apr_srcdir)/CMakeLists.txt
	-mkdir $(apr_srcdir) 2>NUL
	cd $(apr_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(apr_srcdir) && \
	cd ..
!ELSE
$(apr_srcdir)/Makefile: build-openssl build-expat \
			$(SRCDIR)/$(apr_srcdir)/configure
	-mkdir $(apr_srcdir) 2>NUL
	cd $(apr_srcdir) && \
	  $(SRCDIR)/$(apr_srcdir)/configure \
		 --with-openssl=$(DESTDIR) \
		 --with-crypto \
		 --without-ldap \ 
		 --without-lber \
		 --with-installbuilddir=\$${prefix}/build \
		 --includedir=\$${prefix}/include \
		 --prefix=$(DESTDIR) && \
	cd ..
!ENDIF

build-apr: $(apr_srcdir)/Makefile
	-cd $(apr_srcdir) && \
	  mkdir "$(DESTDIR)\include\arch" && \
	  mkdir "$(DESTDIR)\include\arch\win32"
	cd $(apr_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	  copy "$(SRCDIR)\$(apr_srcdir)\include\arch\*.h" "$(DESTDIR)\include\arch" && \
	  copy "$(SRCDIR)\$(apr_srcdir)\include\arch\win32\*.h" "$(DESTDIR)\include\arch\win32" && \
	cd ..


!IFNDEF apriconv_srcdir
with_apriconv=
build-apriconv: build-apr
!ELSE
with_apriconv=--with-apr-iconv=$(DESTDIR)

!IF $(PREFER_CMAKE)
# 1.2.x does not support vpath builds, and does not yet have a Makefile.win
$(apriconv_srcdir)/Makefile.win: $(SRCDIR)\$(apriconv_srcdir)\build\modules.mk.win
	-mkdir $(apriconv_srcdir) 2>NUL
	xcopy /s/v/e/y $(SRCDIR)\$(apriconv_srcdir)\* $(apriconv_srcdir)\ 
	sed -e "s# \([^= ]*\)\\\\\([lib]*apr-1\.lib\) # /libpath:\1 \2 #;" \
		< $(SRCDIR)\$(apriconv_srcdir)\build\modules.mk.win \
		> $(apriconv_srcdir)\build\modules.mk.win
	sed -e "s#"".*\\\\libapr-1.lib""# #;s#\(LINK32_FLAGS=\)\(.*\) /out#\1 libapr-1.lib \2 /libpath:..\\\\$(apr_srcdir)\\\\$$(OUTDIR) /out#;" \
		< $(SRCDIR)\$(apriconv_srcdir)\libapriconv.mak \
		> $(apriconv_srcdir)\libapriconv.mak
	copy << $(apriconv_srcdir)\Makefile.win
ARCH=x64 Release
SLNARCH=Release|x64
ARCHPATH=x64\Release
LIBSPATH=x64\LibR
INCLUDE=$$(PREFIX)\include;$$(INCLUDE)
LIB=$$(PREFIX)\lib;$$(LIB)

all:
	$$(MAKE) $$(MAKEOPT) -f apriconv.mak    CFG="apriconv - $$(ARCH)"    RECURSE=0 $$(CTARGET)
	$$(MAKE) $$(MAKEOPT) -f libapriconv.mak CFG="libapriconv - $$(ARCH)" RECURSE=0 $$(CTARGET)
	cd ccs
	  $$(MAKE) $$(MAKEOPT) -f Makefile.win all BUILD_MODE="$$(ARCH)" BIND_MODE=shared
	cd ..\ces
	  $$(MAKE) $$(MAKEOPT) -f Makefile.win all BUILD_MODE="$$(ARCH)" BIND_MODE=shared
	cd ..

install:
	echo Y >.y
	echo A >.A
	@if NOT EXIST "$$(PREFIX)\."           mkdir "$$(PREFIX)"
	@if NOT EXIST "$$(PREFIX)\bin\."       mkdir "$$(PREFIX)\bin"
	@if NOT EXIST "$$(PREFIX)\bin\iconv\." mkdir "$$(PREFIX)\bin\iconv"
	@if NOT EXIST "$$(PREFIX)\include\."   mkdir "$$(PREFIX)\include"
	@if NOT EXIST "$$(PREFIX)\lib\."       mkdir "$$(PREFIX)\lib"
	xcopy include\*.h                   "$$(PREFIX)\include\" /d < .a
	copy $$(ARCHPATH)\libapriconv-1.dll "$$(PREFIX)\bin\" <.y
	copy $$(ARCHPATH)\libapriconv-1.pdb "$$(PREFIX)\bin\" <.y
	copy $$(ARCHPATH)\libapriconv-1.lib "$$(PREFIX)\lib\" <.y
	copy $$(ARCHPATH)\libapriconv-1.exp "$$(PREFIX)\lib\" <.y
	copy $$(LIBSPATH)\apriconv-1.lib    "$$(PREFIX)\lib\" <.y
	copy $$(LIBSPATH)\apriconv-1.pdb    "$$(PREFIX)\lib\" <.y
	xcopy $$(ARCHPATH)\iconv\*.so       "$$(PREFIX)\bin\iconv\" /d < .a
	xcopy $$(ARCHPATH)\iconv\*.pdb      "$$(PREFIX)\bin\iconv\" /d < .a
	del .y
	del .a
<<

build-apriconv: $(apriconv_srcdir)/Makefile.win build-apr
	cd $(apriconv_srcdir) && \
	  $(MAKE) -f Makefile.win PREFIX=$(DESTDIR) && \
	  $(MAKE) -f Makefile.win PREFIX=$(DESTDIR) install && \
	cd ..
!ELSE
$(apriconv_srcdir)/Makefile: build-apr \
			    $(SRCDIR)/$(apriconv_srcdir)/configure
	-mkdir $(apriconv_srcdir) 2>NUL
	cd $(apriconv_srcdir) && \
	  $(SRCDIR)/$(apriconv_srcdir)/configure \
		 --with-apr=$(DESTDIR) \
		 --with-installbuilddir=\$${prefix}/build \
		 --includedir=\$${prefix}/include \
		 --prefix=$(DESTDIR) && \
	cd ..

build-apriconv: $(apriconv_srcdir)/Makefile
	cd $(apriconv_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
!ENDIF
!ENDIF


!IFNDEF aprutil_srcdir
with_aprutil=
build-aprutil: build-apr build-apriconv
!ELSE
with_aprutil=--with-apr-util=$(DESTDIR)
!IF $(PREFER_CMAKE)
$(aprutil_srcdir)/Makefile: build-openssl build-expat build-apr build-apriconv \
			    $(SRCDIR)/$(aprutil_srcdir)/CMakeLists.txt
	-mkdir $(aprutil_srcdir) 2>NUL
	cd $(aprutil_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		-D APU_HAVE_CRYPTO=1 \
		$(SRCDIR)/$(aprutil_srcdir) && \
	cd ..
!ELSE
$(aprutil_srcdir)/Makefile: build-openssl build-expat build-apr build-apriconv \
			    $(SRCDIR)/$(aprutil_srcdir)/configure
	-mkdir $(aprutil_srcdir) 2>NUL
	cd $(aprutil_srcdir) && \
	  $(SRCDIR)/$(aprutil_srcdir)/configure \
		 --with-apr=$(DESTDIR) \
		 --with-openssl=$(DESTDIR) \
		 --with-crypto \
		 --without-ldap \
		 --without-lber \
		 --with-installbuilddir=\$${prefix}/build \
		 --includedir=\$${prefix}/include \
		 --prefix=$(DESTDIR) && \
	cd ..
!ENDIF

build-aprutil: $(aprutil_srcdir)/Makefile
	cd $(aprutil_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
!ENDIF


!IFNDEF pcre_srcdir
with_pcre=
build-pcre:
!ELSE
with_pcre=--with-pcre=$(DESTDIR)
$(pcre_srcdir)/Makefile:  $(SRCDIR)/$(pcre_srcdir)/CMakeLists.txt
	-mkdir $(pcre_srcdir) 2>NUL
	cd $(pcre_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D BUILD_SHARED_LIBS=ON -D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(pcre_srcdir) && \
	cd ..
#-D BUILD_tests=OFF

build-pcre: $(pcre_srcdir)/Makefile
	cd $(pcre_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
!ENDIF


!IFNDEF zlib_srcdir
build-zlib:

!ELSE
$(zlib_srcdir)/Makefile: $(SRCDIR)/$(zlib_srcdir)
	-mkdir $(zlib_srcdir) 2>NUL
	cd $(zlib_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(zlib_srcdir) && \
	cd ..

build-zlib: $(zlib_srcdir)/Makefile
	cd $(zlib_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..

!ENDIF


!IFNDEF brotli_srcdir
build-brotli:

!ELSE
$(brotli_srcdir)/Makefile: $(SRCDIR)/$(brotli_srcdir)
	-mkdir $(brotli_srcdir) 2>NUL
	cd $(brotli_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_LIBDIR=lib \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(brotli_srcdir) && \
	cd ..

build-brotli: $(brotli_srcdir)/Makefile
	cd $(brotli_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..

!ENDIF


!IFNDEF jansson_srcdir
build-jansson:

!ELSE
$(jansson_srcdir)/Makefile: $(SRCDIR)/$(jansson_srcdir)
	-mkdir $(jansson_srcdir) 2>NUL
	cd $(jansson_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_LIBDIR=lib \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(jansson_srcdir) && \
	cd ..

build-jansson: $(jansson_srcdir)/Makefile
	cd $(jansson_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..

!ENDIF


!IFNDEF libxml2_srcdir
build-libxml2:

!ELSE
!IF $(PREFER_CMAKE)
$(libxml2_srcdir)/Makefile: $(SRCDIR)/$(libxml2_srcdir)/win32/configure.js
	-mkdir $(libxml2_srcdir) 2>NUL
	xcopy /s/v/d/e "$(SRCDIR)\$(libxml2_srcdir)\*" "$(libxml2_srcdir)\"
	cd $(libxml2_srcdir)\win32 && \
	  cscript configure.js compiler=msvc prefix=$(DESTDIR) iconv=no \
		  include=$(DESTDIR)\include lib=$(DESTDIR)\lib && \
	cd ..\..

build-libxml2: $(libxml2_srcdir)/Makefile
	cd $(libxml2_srcdir)\win32 && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..\..
!ELSE
$(libxml2_srcdir)/Makefile: $(SRCDIR)/$(libxml2_srcdir)
	-mkdir $(libxml2_srcdir) 2>NUL
	cd $(libxml2_srcdir) && \
	  $(SRCDIR)/$(libxml2_srcdir)/configure prefix=$(DESTDIR) && \
	cd ..

build-libxml2: $(libxml2_srcdir)/Makefile
	cd $(libxml2_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
!ENDIF
!ENDIF


!IFNDEF nghttp2_srcdir
build-nghttp2:
!ELSE
!IF $(PREFER_CMAKE)
$(nghttp2_srcdir)/Makefile: $(SRCDIR)/$(nghttp2_srcdir)/CMakeLists.txt
	-mkdir $(nghttp2_srcdir) 2>NUL
	cd $(nghttp2_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		-D ENABLE_LIB_ONLY=1 \
		$(SRCDIR)/$(nghttp2_srcdir) && \
	cd ..
!ELSE
$(nghttp2_srcdir)/Makefile: $(SRCDIR)/$(nghttp2_srcdir)/configure
	-mkdir $(nghttp2_srcdir) 2>NUL
	cd $(nghttp2_srcdir) && \
	  $(SRCDIR)/$(nghttp2_srcdir)/configure \
		 --enable-lib-only \
		 --prefix=$(DESTDIR) && \
	cd ..
!ENDIF

build-nghttp2: $(nghttp2_srcdir)/Makefile
	cd $(nghttp2_srcdir) && \
	  $(MAKE) && \
	  $(MAKE) install && \
	cd ..
!ENDIF


!IFNDEF lua_srcdir
build-lua:
!ELSE
!IF $(PREFER_CMAKE)
$(lua_srcdir)/src/Makefile.win: $(SRCDIR)/$(lua_srcdir)/src/Makefile
	xcopy /s/v/e/i "$(SRCDIR)\$(lua_srcdir)" $(lua_srcdir)
	awk > $(lua_srcdir)/src/liblua.rc < $(lua_srcdir)/src/lua.h -f <<
BEGIN{
print "#include <winver.h>"
print "#define STRINGIFY(v) STRINGIFY_HELPER(v)"
print "#define STRINGIFY_HELPER(v) #v"
}
/^#define LUA_VERSION_/ {
gsub(/\"/, "", $$0); 
print $$0; next
}
/^#define LUA_VERSION/ {
print "#define LUA_VERSION\t\"Lua \" STRINGIFY(LUA_VERSION_MAJOR) \".\" \\"
print "\t\t\tSTRINGIFY(LUA_VERSION_MINOR)"
print "#define LUA_VERSION_CSV LUA_VERSION_MAJOR ##, ##LUA_VERSION_MINOR ##, \\"
print "\t\t\t##LUA_VERSION_RELEASE ##,0"
print "#define LUA_RELEASE\tLUA_VERSION \".\" STRINGIFY(LUA_VERSION_RELEASE)"
next
}
/^#define LUA_(COPYRIGHT|AUTHORS)/{
print $$0; next
}
END{
print "#ifdef GCC_WINDRES"
print "VS_VERSION_INFO\t\tVERSIONINFO"
print "#else"
print "VS_VERSION_INFO\t\tVERSIONINFO\tMOVEABLE IMPURE LOADONCALL DISCARDABLE"
print "#endif"
print "  FILEVERSION\t\tLUA_VERSION_CSV"
print "  PRODUCTVERSION\tLUA_VERSION_CSV"
print "  FILEFLAGSMASK\t\tVS_FFI_FILEFLAGSMASK"
print "#ifdef _DEBUG"
print "  FILEFLAGS\t\t1"
print "#else"
print "  FILEFLAGS\t\t0"
print "#endif"
print "  FILEOS\t\tVOS__WINDOWS32"
print "  FILETYPE\t\tVFT_DLL"
print "  FILESUBTYPE\t\t0"
print "BEGIN"
print "  BLOCK \"StringFileInfo\""
print "  BEGIN"
print "    BLOCK \"040904E4\""
print "    BEGIN"
print "      VALUE \"FileDescription\",\t\"Lua scripting language library\\0\""
print "      VALUE \"FileVersion\",\tLUA_RELEASE \"\\0\""
print "      VALUE \"InternalName\",\t\"liblua.dll\\0\""
print "      VALUE \"LegalCopyright\",\tLUA_COPYRIGHT \"\\0\""
print "      VALUE \"OriginalFilename\",\t\"liblua.dll\\0\""
print "      VALUE \"ProductName\",\t\"Lua\\0\""
print "      VALUE \"ProductVersion\",\tLUA_RELEASE \"\\0\""
print "      VALUE \"Comments\",\t\t\"For more information visit http://www.lua.org/\\0\""
print "    END"
print "  END"
print "  BLOCK \"VarFileInfo\""
print "  BEGIN"
print "    VALUE \"Translation\", 0x0409, 1252"
print "  END"
print "END"
}
<<
	awk > $(lua_srcdir)/src/Makefile.win < $(lua_srcdir)/src/Makefile -f <<
/^CC=/{ $$0 = "CC= cl -nologo";print "LD= link -nologo"}
/^CFLAGS=/{print "CFLAGS= -MD -W3 -O2 -Oy- -Zi -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE \"-DLUA_WIN=\" \"-DLUA_DL_DLL=\" \"-DLUA_USE_AFORMAT=\" -DLUA_BUILD_AS_DLL -DLUA_COMPAT_ALL -DLUA_USE_STRTODHEX";
           $$0 = "SHCFLAGS= -Fdlua_src.pdb";}
/^LDFLAGS=/{$$0 = "LDFLAGS= -debug -incremental:no -opt:ref"}
/^LIBS=/{$$0 = "LIBS= $$(SYSLIBS) $$(MYLIBS)"}
/^AR=/{$$0 = "AR= lib -nologo"}
/^RANLIB=/{$$0 = "RANLIB= rem"}
/^RM=/{$$0 = "RM= del"}
/^RCFLAGS=/{$$0 = "RCFLAGS= -dWIN32 -r"}
/^LUA_A=/{
  print "LUA_A= lua.lib";
  print "LUA_SO= liblua.dll";
  $$0 = "LUA_SOA= liblua.lib";
}
/^LUA_T=/{$$0 = "LUA_T= lua.exe"}
/^LUAC_T=/{$$0 = "LUAC_T= luac.exe"}
/^ALL_T=/{$$0 = "ALL_T= $$(LUA_SO)" substr($$0, 7)}
/^o:/{
  print ".c.obj:";
  print "\t$$(CC) -c $$(CFLAGS) $$(SHCFLAGS) $$<";
  print "";
  $$0 = "obj:" substr($$0, 3);
}
/^a:/{$$0 = "lib:" substr($$0, 3)}
/\.o/{gsub(/\.o/, ".obj", $$0)}
/\.a/{gsub(/\.o/, ".lib", $$0)}
/\$$\(AR\) \$$@/{gsub(/\$$@/, "-out:$$@", $$0)}
/\$$\(CC\) -o \$$@ \$$\(LDFLAGS\)/{
  gsub(/\$$\(CC\) -o /, "$$(LD) -out:", $$0);
  if ($$0 ~ /LUA_O/) gsub(/LUA_A/, "LUA_SOA", $$0);
}
/^\$$\(LUA_A\):/{
  print "$$(LUA_SO): $$(BASE_O) liblua.res";
  print "\t$$(LD) $$(LDFLAGS) -dll -base:0x4C550000 -out:$$@ $$(BASE_O) liblua.res";
  print "\tif exist $$@.manifest \\";
  print "\t  mt -nologo -manifest $$@.manifest -outputresource:$$@;2";
  print "";
}
{print $$0}
<<

build-lua: $(lua_srcdir)/src/Makefile.win
	cd "$(lua_srcdir)\src"
	set INCLUDE=$(DESTDIR)\include;$(INCLUDE)
	set LIB=$(DESTDIR)\lib;$(LIB)
	nmake -f Makefile.win all
	copy *.exe "$(DESTDIR)\bin\"
	copy *.dll "$(DESTDIR)\bin\"
	copy lua?.pdb "$(DESTDIR)\bin\"
	copy *.lib "$(DESTDIR)\lib\"
	copy lua_src.pdb "$(DESTDIR)\lib\"
        for %a in (lua.h luaconf.h lualib.h lauxlib.h lua.hpp) do \
	  copy %a "$(DESTDIR)\include\"
	cd "..\doc"
	-mkdir "$(DESTDIR)\man\man1"
	copy *.1 "$(DESTDIR)\man\man1\"
	-mkdir "$(DESTDIR)\share\doc\lua"
	copy * "$(DESTDIR)\share\doc\lua\"
	del "$(DESTDIR)\share\doc\lua\*.1"
	cd "..\.."
!ELSE

build-lua:
!ENDIF
!ENDIF


!IF $(PREFER_CMAKE)
$(httpd_srcdir)/Makefile: build-apr build-aprutil build-openssl \
			  build-pcre build-libxml2 build-zlib \
			  build-brotli build-lua build-nghttp2 \
			  $(SRCDIR)/$(httpd_srcdir)/CMakeLists.txt
	-mkdir $(httpd_srcdir) 2>NUL
	cd $(httpd_srcdir) && \
	  cmake $(CMAKE_DEFAULTS) \
		-D CMAKE_INSTALL_PREFIX=$(DESTDIR) \
		$(SRCDIR)/$(httpd_srcdir) && \
	cd ..
!ELSE
$(httpd_srcdir)/Makefile: build-apr build-aprutil build-openssl \
			  build-pcre build-libxml2 build-zlib \
			  build-brotli build-lua build-nghttp2 \
			  $(SRCDIR)/$(httpd_srcdir)/configure
	-mkdir $(httpd_srcdir) 2>NUL
	cd $(httpd_srcdir) && \
	  $(SRCDIR)/$(httpd_srcdir)/configure \
		 --prefix=$(DESTDIR) \
		 --with-apr=$(DESTDIR) $(with_aprutil) \
		 --with-openssl=$(DESTDIR) \
		 --with-nghttp2=$(DESTDIR) \
		 --with-brotli=$(DESTDIR) \
		 --enable-mods-shared=all \
		 --enable-mpms-shared=all \
		 --enable-load-all-modules \
		 --enable-unixd=static \
		 --enable-version=static \
		 --disable-authnz-ldap \
		 --disable-ldap \
		 --enable-cgi=shared \
		 --enable-authnz-fcgi=shared \
		 --enable-proxy-http2=shared \
		 --enable-suexec=shared \
		 --with-suexec-caller=httpd \
		 --with-suexec-bin=$(TARGET)/bin/suexec		\
		 --with-suexec-docroot=$(TARGET)/suexec-cgi-bin	\
		 --with-suexec-logfile=$(TARGET)/logs/suexec.log \
		 --with-mpm=event && \
	cd ..
!ENDIF

build-httpd: $(httpd_srcdir)/Makefile
	cd $(httpd_srcdir) && \
	  $(MAKE) $(OPT) && \
	  $(MAKE) $(OPT) install && \
	  sed "s/\(LoadModule mpm_\(worker\|prefork\)\)/#\1/" \
		< $(DESTDIR)/conf/original/httpd.conf \
		> $(DESTDIR)/conf/httpd.conf && \
	cd ..


!IFNDEF tcnative_srcdir
build-tcnative:

!ELSE
$(tcnative_srcdir)/Makefile: build-apr build-openssl \
			     $(SRCDIR)/$(tcnative_srcdir)/native/configure
	-mkdir $(tcnative_srcdir) 2>NUL
	cd $(tcnative_srcdir) && \
	  $(SRCDIR)/$(tcnative_srcdir)/native/configure \
		 --with-apr=$(DESTDIR) \
		 --with-ssl=$(DESTDIR) \
		 --prefix=$(DESTDIR) && \
	cd ..

build-tcnative: $(tcnative_srcdir)/Makefile
	cd $(tcnative_srcdir) && \
	  make -j && \
	  make -j install && \
	cd ..

!ENDIF

