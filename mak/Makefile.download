# Pivotal OSS Build Schema for Apache HTTP Server
#
# Copyright (C) 2017-Present Pivotal Software, Inc. All rights reserved.
#
# This program and the accompanying materials are made available under
# the terms of the under the Apache License, Version 2.0 (the "License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Makefile.download : Gather source code packages or (source checkouts)
#                     for all packages into the source tree based on
#                     the manifest file
#
# BLD defines the build type: release - candidate - snapshot - bleed
#
# This makefile is run first from the source directory root, and must be
# performed following updates to the manifest (list of source packages.)
# Makefile.preconfig in the same directory should follow immediately.

BLD=release

include $(BLD)-manifest-vars

all: download-all

pre-download:
	mkdir pkgs 2>/dev/null || true
	echo Downloading $(BLD) Source Trees


$(httpdtest_srcdir): pre-download
	svn co -q $(httpdtest_srcpath) $(httpdtest_srcdir)


$(httpd_srcdir): pre-download
ifdef httpd_pkg
	  cd pkgs && \
	  wget -nv $(httpd_srcpath)/$(httpd_pkg) && \
	  wget -nv $(httpd_srcpath)/$(httpd_pkg).asc && \
	  cd .. && \
          tar -xjf pkgs/$(httpd_pkg)
else
	  svn co -q -r $(httpd_rev) $(httpd_srcpath) $(httpd_srcdir)
endif


$(tcnative_srcdir): pre-download
ifdef tcnative_pkg
	  cd pkgs && \
	  wget -nv $(tcnative_srcpath)/$(tcnative_pkg) && \
	  wget -nv $(tcnative_srcpath)/$(tcnative_pkg).asc && \
	  cd .. && \
	  tar -xzf pkgs/$(tcnative_pkg)
else
	  svn co -q -r $(tcnative_rev) $(tcnative_srcpath) $(tcnative_srcdir)
endif


$(apr_srcdir): pre-download
ifdef apr_pkg
	  cd pkgs && \
	  wget -nv $(apr_srcpath)/$(apr_pkg) && \
	  wget -nv $(apr_srcpath)/$(apr_pkg).asc && \
	  cd .. && \
	  tar -xjf pkgs/$(apr_pkg)
else
	  svn co -q -r $(apr_rev) $(apr_srcpath) $(apr_srcdir)
endif


$(apriconv_srcdir): pre-download
ifdef apriconv_pkg
	  cd pkgs && \
	  wget -nv $(apriconv_srcpath)/$(apriconv_pkg) && \
	  wget -nv $(apriconv_srcpath)/$(apriconv_pkg.asc) && \
	  cd .. && \
	  tar -xjf pkgs/$(apriconv_pkg)
else
	  svn co -q -r $(apriconv_rev) $(apriconv_srcpath) $(apriconv_srcdir)
endif


$(aprutil_srcdir): pre-download
ifdef aprutil_pkg
	  cd pkgs && \
	  wget -nv $(aprutil_srcpath)/$(aprutil_pkg) && \
	  wget -nv $(aprutil_srcpath)/$(aprutil_pkg).asc && \
	  cd .. && \
	  tar -xjf pkgs/$(aprutil_pkg)
else
	  svn co -q -r $(aprutil_rev) $(aprutil_srcpath) $(aprutil_srcdir)
endif


$(openssl_srcdir): pre-download
ifdef openssl_pkg
	  cd pkgs && \
	  wget -nv $(openssl_srcpath)/$(openssl_pkg) && \
	  wget -nv $(openssl_srcpath)/$(openssl_pkg).asc && \
	  cd .. && \
	  tar -xzf pkgs/$(openssl_pkg)
else
	  git clone -q $(openssl_srcpath).git -b $(openssl_rev) $(openssl_srcdir)
endif


$(nghttp2_srcdir): pre-download
ifdef nghttp2_pkg
	  cd pkgs && \
	  wget -nv $(nghttp2_srcpath)/$(nghttp2_pkg) && \
	  cd .. && \
	  tar -xjf pkgs/$(nghttp2_pkg)
else
	  git clone -q $(nghttp2_srcpath).git $(nghttp2_srcdir)
endif


$(brotli_srcdir): pre-download
ifdef brotli_pkg
	  cd pkgs && \
	  wget -nv $(brotli_srcpath) -O $(brotli_pkg) && \
	  cd .. && \
	  tar -xzf pkgs/$(brotli_pkg)
else
	  git clone -q $(brotli_srcpath).git $(brotli_srcdir)
endif


$(curl_srcdir): pre-download
ifdef curl_pkg
	  cd pkgs && \
	  wget -nv $(curl_srcpath)/$(curl_pkg) && \
	  wget -nv $(curl_srcpath)/$(curl_pkg).asc && \
	  cd .. && \
          tar -xjf pkgs/$(curl_pkg)
else
	  git clone -q $(curl_srcpath.git) $(curl_srcdir)
endif


$(openldap_srcdir): pre-download
ifdef openldap_pkg
	  cd pkgs && \
	  wget -nv $(openldap_srcpath)/$(openldap_pkg) && \
	  openldap_sig=`echo $(openldap_pkg) | sed 's#\.tgz#.sha1#'` && \
	  wget -nv $(openldap_srcpath)/$$openldap_sig && \
	  cd .. && \
          tar -xzf pkgs/$(openldap_pkg)
else
	  git clone -q -b OPENLDAP_REL_ENG_$(openldap_ver) $(openldap_srcpath) $(openldap_srcdir)
endif


$(expat_srcdir): pre-download
ifdef expat_pkg
	  cd pkgs && \
	  wget -nv $(expat_srcpath) -O $(expat_pkg) && \
	  cd .. && \
	  tar -xzf pkgs/$(expat_pkg)
else
	  git clone -q $(expat_srcpath).git $(expat_srcdir)
endif


$(pcre_srcdir): pre-download
ifdef pcre_pkg
	  cd pkgs && \
	  wget -nv $(pcre_srcpath)/$(pcre_pkg) && \
	  wget -nv $(pcre_srcpath)/$(pcre_pkg).sig && \
	  cd .. && \
	  tar -xjf pkgs/$(pcre_pkg)
else
	  svn co -q -r $(pcre_rev) $(pcre_srcpath) $(pcre_srcdir)
endif


$(jansson_srcdir): pre-download
ifdef jansson_pkg
	  cd pkgs && \
	  wget -nv $(jansson_srcpath) -O $(jansson_pkg) && \
	  cd .. && \
	  tar -xzf pkgs/$(jansson_pkg)
else
	  git clone -q $(jansson_srcpath).git $(jansson_srcdir)
endif


$(libxml2_srcdir): pre-download
ifdef libxml2_pkg
	  cd pkgs && \
	  wget -nv $(libxml2_srcpath) -O $(libxml2_pkg) && \
	  cd .. && \
	  tar -xzf pkgs/$(libxml2_pkg)
else
	  git clone -q $(libxml2_srcpath).git $(libxml2_srcdir)
endif


$(lua_srcdir): pre-download
ifdef lua_pkg
	  cd pkgs && \
	  wget -nv $(lua_srcpath)/$(lua_pkg) && \
	  cd ..
	  tar -xzf pkgs/$(lua_pkg)
endif


$(zlib_srcdir): pre-download
ifdef zlib_pkg
	cd pkgs && \
	wget -nv $(zlib_srcpath)/$(zlib_pkg) && \
	wget -nv $(zlib_srcpath)/$(zlib_pkg).asc && \
	cd .. && \
	tar -xzf pkgs/$(zlib_pkg)
else
	git clone -q $(zlib_srcpath).git $(zlib_srcdir)
endif


download-all:	$(httpdtest_srcdir) $(httpd_srcdir) $(tcnative_srcdir) \
		$(apr_srcdir) $(apriconv_srcdir) $(aprutil_srcdir) \
		$(openssl_srcdir) $(nghttp2_srcdir) $(brotli_srcdir) \
		$(curl_srcdir) $(openldap_srcdir) $(expat_srcdir) \
		$(pcre_srcdir) $(jansson_srcdir) $(libxml2_srcdir) \
		$(lua_srcdir) $(zlib_srcdir)

